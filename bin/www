#!/usr/bin/env node

/* Module dependencies. */

const app = require('../app');
const debug = require('debug')('drawing:server');
const http = require('http');

/* Get port from environment and store in Express. */

const port = normalizePort(process.env.PORT || '8005');
app.set('port', port);

/* Create HTTP server. */

const server = http.createServer(app);

/* Attach socket.io to server. */

const io = require('socket.io')(server);
const chat = io.of('/chat');
let numUsers = 0;
chat.on('connection', (socket) => {
  socket.on('new message', (data) => socket.broadcast.emit('new message', { username: socket.username, message: data }));
  socket.on('add user', (username) => {
    socket.username = username;
    numUsers++;
    socket.emit('login', { numUsers });
    socket.broadcast.emit('user joined', { username, numUsers })
  });
  socket.on('disconnect', () => {
    if (socket.username) {
      numUsers--;
      socket.broadcast.emit('user left', { username: socket.username, numUsers });
    }
  });

});

let history = [];
io.on('connection', (socket) => {
  socket.on('resize', () => {
    socket.emit('history', history);
  });
  socket.on('drawing', (data) => {
    socket.broadcast.emit('drawing', data);
    history.push(data);
  });
  socket.on('clear', () => {
    history = [];
    socket.broadcast.emit('clear');
  });
});

/* Listen on provided port, on all network interfaces. */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/* Normalize a port into a number, string, or false. */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/* Event listener for HTTP server "error" event. */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/* Event listener for HTTP server "listening" event. */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
